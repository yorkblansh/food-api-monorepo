// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model User {
  id       Int      @id @default(autoincrement())
  name     String?  @unique
  // @Validator.IsEmail()
  email    String?  @unique
  password String?  @unique
  posts    Post[]
  profile  Profile?
  role     Role     @relation(fields: [roleId], references: [id])
  roleId   Int
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?     @unique
  tags      Tag[]    @relation("TagPostRelation")
}

model Profile {
  id     Int     @id @default(autoincrement())
  /// @Validator.MinLength(5)
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("TagPostRelation")
}

// enum RoleEnum {
//   admin
//   generic
//   guest
// }

model Role {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  manage Boolean @default(false)
  create Boolean @default(false)
  read   Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)
  user   User[]
}

// model Donation {
//   id          Int      @id @default(autoincrement())
//   count       Int
//   createdAt   DateTime @default(now())
//   /// @Validator.MinLength(3)
//   displayName String
//   /// @Validator.IsEmail()
//   email       String
//   mobile      String?
//   message     String?
//   team        String?
// }

// model Shop {
//   id       Int       @id @default(autoincrement())
//   shopName String
//   address  String
//   // products Product[]
// }

// model Store {
//   id        Int    @id @default(autoincrement())
//   storeName String
//   address   String
// }

// model Product {
//   id             Int       @id @default(autoincrement())
//   count          Int
//   productName    String
//   price          Int
//   type           String?
//   expirationDate DateTime?
//   deliveryDate   DateTime?
//   // Shop           Shop?     @relation(fields: [shopId], references: [id])
//   shopId         Int?
// }
